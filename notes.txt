//toggle mode, study this more
--Initial state will be blue/orange
--if user chooses dark mode, then it will be purple and yellow
--if user chooses light mode, then it will be light grey/white

//key
.Calculator__key will have its own class to style each button
.Caculator__key--${key} in order to place each key exactly where it needs to be
delete reset and equal have a new color, so within .Calculator**key we will have a &--delete, reset and equal where
.for  .Calculator__key--${theme}, we will need a .Calculator__key--${theme}--delete because for that specific theme only delete and reset and equal sign will have different values

//functionality
-an operator has to follow a factorial sign
-factorial sign can only come after a number
-if previous items was a decimal, you cant put another decimal
-first thing can't be an operator or a factorial
-"_" means negative sign, make sure to bring center and up so it aligns vertically with number and looks like negative sign. Also this can only come after an operation
- i need to add negative button, exponent button, and factorial button.Turning ** to ^ will still work the same. Just change the code to when start is on ^, do **

--make sure to show errors. errors will be in a separate state and we display it at top of calculator


//themes
-regular theme is theme1;
-light theme is theme2
-dark theme is theme3

//look at toggle
//when we toggle we select a theme class
//getAdditionalClass() will look like key__value--theme--del-reset key__value--theme--equals